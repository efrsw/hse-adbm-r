pi_estimates <- numeric(length(num_samples_vector))
for (i in 1:length(num_samples_vector)) {
num_samples <- num_samples_vector[i]
pi_estimates[i] <- monte_carlo_pi(num_samples)
}
plot(num_samples_vector, pi_estimates, type = "l", col = "blue", xlab = "Число бросков", ylab = "Оценка Pi")
#### практика ####
x = runif(1, -5, 5)
sin(x)
k = 0:10
mysin = (-1)^k * (x^(2*k + 1) / factorial(2*k + 1))
n_sims = seq(100, 1000, 100)
n_sims = seq(100, 10000, 100)
s = length(data.frame(runif(10000, -1, 1), runif(10000, -1, 1))[(x^2 + y^2) <= 1, ][,1])/1
p = data.frame(
x = runif(n_sims, -1, 1),
y = runif(n_sims, -1, 1)
)[(x^2 + y^2) <= 1][,1]/n_sims
p = data.frame(
x = runif(n_sims, -1, 1),
y = runif(n_sims, -1, 1)
)[(x^2 + y^2) <= 1][,1]/n_sims
p = data.frame(
x = runif(n_sims, -1, 1),
y = runif(n_sims, -1, 1)
)[(x^2 + y^2) <= 1][,1]
n_sims = seq(100, 10000, 100)
p = data.frame(
x = runif(n_sims, -1, 1),
y = runif(n_sims, -1, 1)
)[(x^2 + y^2) <= 1][,1]
p = data.frame(
x = runif(n_sims, -1, 1),
y = runif(n_sims, -1, 1)
)
n_sims = seq(100, 10000, 100)
n_sims
p = runif(n_sims, -1, 1)
P
p
# Площадь квадрата = 4*r^2, площадь круга = p*r^2.
# Вероятность точки = площадь круга / площадь квадрата
# p = 4 * вероятность точки
calc_prob(10000) * 4 # наша оценка
calc_prob = function(num_samples) {
x = runif(num_samples, -1, 1)
y = runif(num_samples, -1, 1)
d <- data.frame(x=x, y=y)
s = p[(x^2 + y^2) <= 1, ]
prob = length(s[,1]) / 10000
return(prob)
}
# Площадь квадрата = 4*r^2, площадь круга = p*r^2.
# Вероятность точки = площадь круга / площадь квадрата
# p = 4 * вероятность точки
calc_prob(10000) * 4 # наша оценка
calc_prob = function(num_samples) {
x = runif(num_samples, -1, 1)
y = runif(num_samples, -1, 1)
d <- data.frame(x=x, y=y)
s = p[(x^2 + y^2) <= 1, ]
prob = length(s[,1]) / 10000
return(prob)
}
calc_prob(1000)
calc_prob = function(num_samples) {
x = runif(num_samples, -1, 1)
y = runif(num_samples, -1, 1)
d <- data.frame(x=x, y=y)
s = d[(x^2 + y^2) <= 1, ]
prob = length(s[,1]) / 10000
return(prob)
}
calc_prob(1000)
# Площадь квадрата = 4*r^2, площадь круга = p*r^2.
# Вероятность точки = площадь круга / площадь квадрата
# p = 4 * вероятность точки
calc_prob(10000) * 4 # наша оценка
map(n_sims, calc_prob())
?map
?map()
?matrix
Map(calc_prob, n_sims)
Map(calc_prob * 4, n_sims)
estimate_pi = function(num_samples) {
x = runif(num_samples, -1, 1)
y = runif(num_samples, -1, 1)
d <- data.frame(x=x, y=y)
s = d[(x^2 + y^2) <= 1, ]
prob = length(s[,1]) / 10000
# Площадь квадрата = 4*r^2, площадь круга = p*r^2.
# Вероятность точки = площадь круга / площадь квадрата
# p = 4 * вероятность точки
return(prob * 4)
}
estimate_pi(10000)
estims = Map(calc_prob, n_sims)
plot(estims)
plot(1:100, estims)
estimate_pi(10000) # наша оценка на 10000
n_sims = seq(100, 10000, 100)
estims = Map(estimate_pi, n_sims)
plot(1:100, estims)
plot(n_sims, estims)
n_sims = seq(100, 10000, 100)
estims = Map(estimate_pi, n_sims)
plot(n_sims, estims)
plot(n_sims, estims)
estimate_pi(10000) # наша оценка на 10000
estimate_pi(100)
estimate_pi = function(num_samples) {
x = runif(num_samples, -1, 1)
y = runif(num_samples, -1, 1)
d <- data.frame(x=x, y=y)
s = d[(x^2 + y^2) <= 1, ]
prob = length(s[,1]) / num_samples
# Площадь квадрата = 4*r^2, площадь круга = p*r^2.
# Вероятность точки = площадь круга / площадь квадрата
# p = 4 * вероятность точки
return(prob * 4)
}
estimate_pi(10000) # наша оценка на 10000
estimate_pi(100)
estimate_pi = function(num_samples) {
x = runif(num_samples, -1, 1)
y = runif(num_samples, -1, 1)
d <- data.frame(x=x, y=y)
s = d[(x^2 + y^2) <= 1, ]
prob = length(s[,1]) / num_samples
# Площадь квадрата = 4*r^2, площадь круга = p*r^2.
# Вероятность точки = площадь круга / площадь квадрата
# p = 4 * вероятность точки
return(prob * 4)
}
estimate_pi(10000) # наша оценка на 10000
estimate_pi(100)
n_sims = seq(100, 10000, 100)
estims = Map(estimate_pi, n_sims)
plot(n_sims, estims)
n_sims = seq(100, 100000, 100)
estims = Map(estimate_pi, n_sims)
plot(n_sims, estims)
pi
plot(1:100000, pi)
lines(x=n_sims)
plot(n_sims, estims)
lines(x=n_sims)
lines(x=1:10000, y=rep(pi, 10000), col = "red")
lines(x=1:10000, y=rep(pi, 100000), col = "red")
lines(x=1:100000, y=rep(pi, 100000), col = "red")
lines(x=1:100000, y=rep(pi, 100000),
col = "red",
lwd = 2)
lines(x=1:100000, y=rep(pi, 100000),
col = "red",
lwd = 2,
labels("PI"))
lines(x=1:100000, y=rep(pi, 100000),
col = "red",
lwd = 2,
labels("PI"))
lines(x=1:100000, y=rep(pi, length(x)),
col = "red",
lwd = 2)
plot(n_sims, estims)
x = 1: 100000
lines(x=x, y=rep(pi, x),
col = "red",
lwd = 2)
estimate_pi = function(num_samples) {
x = runif(num_samples, -1, 1)
y = runif(num_samples, -1, 1)
d <- data.frame(x=x, y=y)
s = d[(x^2 + y^2) <= 1, ]
prob = length(s[,1]) / num_samples
# Площадь квадрата = 4*r^2, площадь круга = p*r^2.
# Вероятность точки = площадь круга / площадь квадрата
# p = 4 * вероятность точки
return(prob * 4)
}
estimate_pi(10000) # наша оценка на 10000
estimate_pi(100)
n_sims = seq(100, 100000, 100)
estims = Map(estimate_pi, n_sims)
plot(n_sims, estims)
x = 1: 100000
lines(x=x, y=rep(pi, x),
col = "red",
lwd = 2)
estimate_pi = function(num_samples) {
x = runif(num_samples, -1, 1)
y = runif(num_samples, -1, 1)
d <- data.frame(x=x, y=y)
s = d[(x^2 + y^2) <= 1, ]
prob = length(s[,1]) / num_samples
# Площадь квадрата = 4*r^2, площадь круга = p*r^2.
# Вероятность точки = площадь круга / площадь квадрата
# p = 4 * вероятность точки
return(prob * 4)
}
estimate_pi(10000) # наша оценка на 10000
n_sims = seq(100, 100000, 100)
estims = Map(estimate_pi, n_sims)
plot(n_sims, estims)
x = 1:100000
lines(x=x, y=rep(pi, len(x)),
col = "red",
lwd = 2)
lines(x=x, y=rep(pi, length(x)),
col = "red",
lwd = 2)
lines(x=n_sims, y=rep(pi, length(x)),
col = "red",
lwd = 2)
lines(x=1:100000, y=rep(pi, 100000),
col = "red",
lwd = 2)
plot(n_sims, estims)
lines(x=1:100000, y=rep(pi, 100000),
col = "red",
lwd = 2)
estimate_pi = function(num_samples) {
x = runif(num_samples, -1, 1)
y = runif(num_samples, -1, 1)
d <- data.frame(x=x, y=y)
s = d[(x^2 + y^2) <= 1, ]
prob = length(s[,1]) / num_samples
# Площадь квадрата = 4*r^2, площадь круга = p*r^2.
# Вероятность точки = площадь круга / площадь квадрата
# p = 4 * вероятность точки
return(prob * 4)
}
estimate_pi(10000) # наша оценка на 10000
n_sims = seq(100, 100000, 100)
estims = Map(estimate_pi, n_sims)
plot(n_sims, estims)
lines(x=1:100000, y=rep(pi, 100000),
col = "red",
lwd = 2)
estimate_pi = function(num_samples) {
x = runif(num_samples, -1, 1)
y = runif(num_samples, -1, 1)
d <- data.frame(x=x, y=y)
s = d[(x^2 + y^2) <= 1, ]
prob = length(s[,1]) / num_samples
# Площадь квадрата = 4*r^2, площадь круга = p*r^2.
# Вероятность точки = площадь круга / площадь квадрата
# p = 4 * вероятность точки
return(prob * 4)
}
estimate_pi(10000) # наша оценка на 10000
n_sims = seq(100, 10000, 100)
estims = Map(estimate_pi, n_sims)
plot(n_sims, estims)
lines(x=1:10000, y=rep(pi, 10000),
col = "red",
lwd = 2)
estimate_pi = function(num_samples) {
x = runif(num_samples, -1, 1)
y = runif(num_samples, -1, 1)
d <- data.frame(x=x, y=y)
s = d[(x^2 + y^2) <= 1, ]
prob = length(s[,1]) / num_samples
# Площадь квадрата = 4*r^2, площадь круга = p*r^2.
# Вероятность точки = площадь круга / площадь квадрата
# p = 4 * вероятность точки
return(prob * 4)
}
estimate_pi(10000) # наша оценка на 10000
n_sims = seq(100, 15000, 100)
estims = Map(estimate_pi, n_sims)
plot(n_sims, estims)
lines(x=1:15000, y=rep(pi, 15000),
col = "red",
lwd = 2)
install.packages('ape')
install.packages("ape")
library(ape)
fn = function(cw) {
if(nchar(cw) == 6) {
t = co(s, cw)
if(t > mx) {
mx = t
mxseq = cw
}
if(t < mn) {
mn = t
mnseq = cw
}
return;
}
for(i in 1:4) {
cw = paste0(cw, nucs[i])
fn(cw)
cw = substr(cw, 1, nchar(cw) - 1)
}
}
co = function(st, let) {
m = gregexpr(let, st)
return(sum(unlist(m) != -1))
}
seq = ape::read.dna("./sequence.fasta", format="fasta")
seq = ape::read.dna("C:/dev/R/hse-adbm-r/seminar_4/sequence.fasta", format="fasta")
seq = ape::read.dna("C:/dev/hse-adbm-r/seminar_4/sequence.fasta", format="fasta")
s = paste(as.character(seq)[1, ], collapse = "")[1]
rm(seq)
gc()
nchar(s)
nucs = c("a", "t", "c", "g")
mx = 0
mn = 5132068
mxseq = ""
mnseq = ""
fn("")
# Input string
input_string <- "abcdefghijk"
# Length of substrings
substring_length <- 4
substrings <- sapply(start_positions, function(start_pos) {
end_pos <- start_pos + substring_length - 1
substring(input_string, start_pos, end_pos)
})
# Create a vector of start positions
start_positions <- 1:num_substrings
substrings <- sapply(start_positions, function(start_pos) {
end_pos <- start_pos + substring_length - 1
substring(input_string, start_pos, end_pos)
})
# Calculate the number of substrings
num_substrings <- nchar(input_string) - substring_length + 1
substrings <- sapply(start_positions, function(start_pos) {
end_pos <- start_pos + substring_length - 1
substring(input_string, start_pos, end_pos)
})
# Input string
input_string <- "abcdefghijk"
# Length of substrings
substring_length <- 4
# Calculate the number of substrings
num_substrings <- nchar(input_string) - substring_length + 1
# Create a vector of start positions
start_positions <- 1:num_substrings
# Use sapply to extract substrings
substrings <- sapply(start_positions, function(start_pos) {
end_pos <- start_pos + substring_length - 1
substring(input_string, start_pos, end_pos)
})
# Print or use the substrings as needed
print(substrings)
# Input string
input_string <- "abcdefghijk"
# Length of substrings
substring_length <- 4
# Create a vector of start positions
start_positions <- 1:num_substrings
# Calculate the number of substrings
num_substrings <- nchar(input_string) - substring_length + 1
# Create a vector of start positions
start_positions <- 1:num_substrings
# Use sapply to extract substrings
substrings <- sapply(start_positions, function(start_pos) {
end_pos <- start_pos + substring_length - 1
substring(input_string, start_pos, end_pos)
})
# Calculate the frequency of each substring
substring_counts <- table(substrings)
# Find the most occurring substring
most_occuring_substring <- names(substring_counts)[which.max(substring_counts)]
# Print the result
print(paste("Most occurring substring:", most_occuring_substring))
print(paste("Frequency:", max(substring_counts)))
# Input string
input_string <- "abcdefghijkabcd"
# Length of substrings
substring_length <- 4
# Calculate the number of substrings
num_substrings <- nchar(input_string) - substring_length + 1
# Create a vector of start positions
start_positions <- 1:num_substrings
# Use sapply to extract substrings
substrings <- sapply(start_positions, function(start_pos) {
end_pos <- start_pos + substring_length - 1
substring(input_string, start_pos, end_pos)
})
# Print or use the substrings as needed
print(substrings)
# Calculate the frequency of each substring
substring_counts <- table(substrings)
# Find the most occurring substring
most_occuring_substring <- names(substring_counts)[which.max(substring_counts)]
# Print the result
print(paste("Most occurring substring:", most_occuring_substring))
print(paste("Frequency:", max(substring_counts)))
seq = ape::read.dna("C:/dev/hse-adbm-r/seminar_4/sequence.fasta", format="fasta")
s = paste(as.character(seq)[1, ], collapse = "")[1]
rm(seq)
gc()
# Количество возможных стартов
ns = nchar(s) - 5
sp = 1:ns
ss = sapply(sp, function(sp) {
ep = sp + 6
substring(is, sp, ep)
})
ss = sapply(sp, function(sp) {
ep = sp + 6
substring(is, sp, ep)
})
seq = ape::read.dna("C:/dev/hse-adbm-r/seminar_4/sequence.fasta", format="fasta")
s = paste(as.character(seq)[1, ], collapse = "")[1]
rm(seq)
gc()
# Количество возможных стартов
ns = nchar(s) - 5
sp = 1:ns
ss = sapply(sp, function(sp) {
ep = sp + 6
substring(is, sp, ep)
})
ss = sapply(sp, function(sp) {
ep = sp + 6
substring(s, sp, ep)
})
sc <- table(ss)
# Find the most occurring substring
most_occuring_substring <- names(substring_counts)[which.max(substring_counts)]
# Find the most occurring substring
most_occuring_substring <- names(sc)[which.max(sc)]
los = names(sc)[which.max(sc)]
install.packages('ape')
install.packages("ape")
library(ape)
seq = ape::read.dna("C:/dev/hse-adbm-r/seminar_4/sequence.fasta", format="fasta")
s = paste(as.character(seq)[1, ], collapse = "")[1]
rm(seq)
gc()
# Количество возможных стартов
ns = nchar(s) - 5
sp = 1:ns
# Возьмем вектор стартов и
# сделаем из него вектор подстрок
ss = sapply(sp, function(sp) {
ep = sp + 5
substring(s, sp, ep)
})
sc = table(ss)
sc
res[1:2]
res = order(table(ss))
res[1:2]
res
res = order(table(ss))
ss[res[1,2]]
ss[res][1:2]
res = order(table(ss), decreasing = TRUE)
ss[res][1:2]
names(table(ss))
max(sc)
sc[,1]
sc[1,]
sc[1]
min(sc)
max(sc)
sc[24]
sc
order(sc)
sc
which.max(sc)
which.min(sc)
min(sc)
which.max(sc[1,])
which.max(sc)
which.max(sc)
sc[sc == mx]
sc = table(ss)
mx = max(sc)
mn = min(sc)
sc[sc == mx]
sc[sc == mn]
order(table)
order(sc)
sc = sort(table(ss))
sc[1:2]
setwd("C:/dev/hse-adbm-r/seminar_4/")
library(ape)
s = paste(as.character(
ape::read.dna("./sequence.fasta", format="fasta")
)[1, ], collapse = "")[1]
sp = 1:nchar(s) - 5
sp = 1:(nchar(s) - 5)
# Возьмем вектор стартов и сделаем из него вектор подстрок
ss = sapply(sp, function(sp) {
ep = sp + 5
substring(s, sp, ep)
})
# Два самых частых
print(sort(table(ss), decreasing = TRUE)[1:2])
# Двы самых редких
print(sort(table(ss))[1:2])
library(ape)
s = paste(as.character(
ape::read.dna("./sequence.fasta", format="fasta")
)[1, ], collapse = "")[1]
sp = 1:(nchar(s) - 5)
# Возьмем вектор стартов и сделаем из него вектор подстрок
ss = sapply(sp, function(sp) {
substring(s, sp, sp + 5)
})
# Двы самых редких
print(sort(table(ss))[1:2])
# Два самых частых
print(sort(table(ss), decreasing = TRUE)[1:2])
